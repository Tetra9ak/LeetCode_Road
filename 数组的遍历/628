给你一个整型数组 nums ，在数组中找出由三个数组成的最大乘积，并输出这个乘积。

示例 1：
输入：nums = [1,2,3]
输出：6

示例 2：
输入：nums = [1,2,3,4]
输出：24

示例 3：
输入：nums = [-1,-2,-3]
输出：-6
 

提示：
3 <= nums.length <= 104
-1000 <= nums[i] <= 1000



解题思路：
1)该数组若全为正数，则三个最大的数求乘积
2)该数组若全为负数，则三个最大的数求乘积
3)该数组有正数也有负数：
    a)三个最大的正数求乘积
    b)一个最大的正数和两个最小的负数
    求两个分类的最大值


class Solution:
    def maximumProduct(self, nums: List[int]) -> int:
        max1 = -float('inf')
        max2 = -float('inf')
        max3 = -float('inf')
        min1 = float('inf')
        min2 = float('inf')

        for num in nums:
            if num > max1:
                max3 = max2
                max2 = max1
                max1 = num
            elif num > max2:
                max3 = max2
                max2 = num
            elif num > max3:
                max3 = num
            
            if num < min1:
                min2 = min1
                min1 = num
            elif num < min2:
                min2 = num
            
        return max(max1 * max2 * max3, max1 * min1 * min2)
