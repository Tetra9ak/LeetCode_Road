给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。

示例 1：
输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]

示例 2：
输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]
 

提示：
m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100


解题思路：
1、设定矩阵的四个边界
2、设定运动方向
3、到达边界后修改运动方向，边界收缩

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        if not matrix or not matrix[0]: return []
        m = len(matrix)
        n = len(matrix[0])
        result = []
        current_direction = 0
        operation = [(0,1), (1,0), (0,-1), (-1,0)]
        left, right, top, bottom = 0, n-1, 0, m-1
        x, y = 0, 0

        while(len(result)) != m*n :
            result.append(matrix[x][y])
            if current_direction == 0 and y == right:
                current_direction += 1
                top += 1
            elif current_direction == 1 and x == bottom:
                current_direction += 1
                right -= 1
            elif current_direction == 2 and y == left:
                current_direction += 1
                bottom -= 1 
            elif current_direction == 3 and x == top:
                current_direction += 1
                left += 1                
            current_direction %= 4
            x += operation[current_direction][0]
            y += operation[current_direction][1]
        return result
