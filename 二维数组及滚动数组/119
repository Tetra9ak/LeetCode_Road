给定一个非负索引 rowIndex，返回「杨辉三角」的第 rowIndex 行。
在「杨辉三角」中，每个数是它左上方和右上方的数的和。


示例 1:
输入: rowIndex = 3
输出: [1,3,3,1]

示例 2:
输入: rowIndex = 0
输出: [1]

示例 3:
输入: rowIndex = 1
输出: [1,1]
 

提示:
0 <= rowIndex <= 33
 

进阶：
你可以优化你的算法到 O(rowIndex) 空间复杂度吗？


解题思路：
1、用一个长度为k的一维数组。类似于动态规划中滚动数组的思路。
2、使用一维数组，然后从右向左遍历每个位置，每个位置的元素res[j] += 其左边的元素 res[j−1]。
  为啥不从左向右遍历呢？
  因为如果从左向右遍历，那么左边的元素已经更新为第 i 行的元素了，而右边的元素需要的是第 i−1 行的元素。故从左向右遍历会破坏元素的状态。

class Solution(object):
    def getRow(self, rowIndex):
        res = [1] * (rowIndex + 1)
        for i in range(2, rowIndex + 1):
            for j in range(i - 1, 0, -1):
                res[j] += res[j - 1]
        return res
