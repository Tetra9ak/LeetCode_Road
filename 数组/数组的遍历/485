给定一个二进制数组 nums ， 计算其中最大连续 1 的个数。

示例 1：
输入：nums = [1,1,0,1,1,1]
输出：3
解释：开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.

示例 2:
输入：nums = [1,0,1,1,0,1]
输出：2
 

提示：
1 <= nums.length <= 105
nums[i] 不是 0 就是 1.



解题思路：
1、按序遍历整个数组，如果遍历到1则计数。
2、设置存储器帮助存储计数器记录到的最大值。
3、比较存储器与计数器的大小并取较大值。


class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        Count = 0
        Max_Count = 0
        for i in nums:
            if i == 1:
                Count += 1
            else:
                Max_Count = max(Max_Count,Count)
                Count = 0
        return max(Max_Count,Count)
