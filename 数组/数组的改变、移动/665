给你一个长度为 n 的整数数组 nums ，请你判断在 最多 改变 1 个元素的情况下，该数组能否变成一个非递减数列。
我们是这样定义一个非递减数列的： 对于数组中任意的 i (0 <= i <= n-2)，总满足 nums[i] <= nums[i + 1]。

 

示例 1:
输入: nums = [4,2,3]
输出: true
解释: 你可以通过把第一个 4 变成 1 来使得它成为一个非递减数列。

示例 2:
输入: nums = [4,2,1]
输出: false
解释: 你不能在只改变一个元素的情况下将其变为非递减数列。
 

提示：
n == nums.length
1 <= n <= 104
-105 <= nums[i] <= 105



解题思路：
1、设置计数器判断修改过数组几次
2、按序遍历数组，判断nums[i]和nums[i-1]的大小
  a)如果nums[i]<nums[i-1]                       # 后一个值小于前一个值,不满足非降序
    计数器次数加1
    1)判断i是否等于1 或者 nums[i]>=nums[i-2]
      a、若是，改变nums[i-1]的值为nums[i]        # 将前一个值改小
      b、若不是，改变nums[i]的值为nums[i-1]      # 将后一个值改大
3、如果计数器的次数<=1,返回true

class Solution(object):
    def checkPossibility(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        N = len(nums)
        count = 0
        for i in range(1, N):
            if nums[i] < nums[i - 1]:
                count += 1
                if i == 1 or nums[i] >= nums[i - 2]:
                    nums[i - 1] = nums[i]
                else:
                    nums[i] = nums[i - 1]
        return count <= 1
