给你一个字符数组 chars ，请使用下述算法压缩：

从一个空字符串 s 开始。对于 chars 中的每组 连续重复字符 ：

如果这一组长度为 1 ，则将字符追加到 s 中。
否则，需要向 s 追加字符，后跟这一组的长度。
压缩后得到的字符串 s 不应该直接返回 ，需要转储到字符数组 chars 中。需要注意的是，如果组长度为 10 或 10 以上，则在 chars 数组中会被拆分为多个字符。

请在 修改完输入数组后 ，返回该数组的新长度。

你必须设计并实现一个只使用常量额外空间的算法来解决此问题。

 

示例 1：
输入：chars = ["a","a","b","b","c","c","c"]
输出：返回 6 ，输入数组的前 6 个字符应该是：["a","2","b","2","c","3"]
解释："aa" 被 "a2" 替代。"bb" 被 "b2" 替代。"ccc" 被 "c3" 替代。

示例 2：
输入：chars = ["a"]
输出：返回 1 ，输入数组的前 1 个字符应该是：["a"]
解释：唯一的组是“a”，它保持未压缩，因为它是一个字符。

示例 3：
输入：chars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]
输出：返回 4 ，输入数组的前 4 个字符应该是：["a","b","1","2"]。
解释：由于字符 "a" 不重复，所以不会被压缩。"bbbbbbbbbbbb" 被 “b12” 替代。
 

提示：
1 <= chars.length <= 2000
chars[i] 可以是小写英文字母、大写英文字母、数字或符号


解题思路：
1、在原数组上修改，所以采用双指针w和r，先读后改
2、r遍历数组
  1)如果char[r+1] == char[r]，r+=1继续记录，长度count+=1
  2)如果char[r+1] != char[r]，
    a)如果count==1，w+=1从第二位开始写，char[w]=char[r+1]
    b)如果count<10，w+=1从第二位开始写，temp=char[r+1], char[w]=str(s), w+=1开始准备写下一个元素，值为chars[w] = l
    c)如果count>10，temp=char[r+1], w+=1从第二位开始写，对s中的每一位进行遍历，写入char[w]，w+=1开始准备写下一个元素，值为chars[w] = l
3、返回原数组开头到第w-1位的长度



class Solution:
    def compress(self, chars: List[str]) -> int:
        lens = len(chars)
        w,r = 0,0
        if lens == 1:
            return lens
        chars.append('#')
        while r <= lens - 1:
            s = 1
            while r <= lens - 2 and chars[r] == chars[r+1]:
                r += 1
                s += 1
            if s == 1:
                w += 1
                chars[w] = chars[r+1]
            elif s < 10:
                w += 1
                l = chars[r + 1]
                chars[w] = str(s)
                w += 1
                chars[w] = l
            else:
                l = chars[r + 1]
                for letter in str(s):
                    w += 1
                    chars[w] = letter
                w += 1
                chars[w] = l
            r += 1
        return len(chars[:w])
