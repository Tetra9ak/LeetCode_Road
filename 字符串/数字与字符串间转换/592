给定一个表示分数加减运算的字符串 expression ，你需要返回一个字符串形式的计算结果。 

这个结果应该是不可约分的分数，即最简分数。 如果最终结果是一个整数，例如 2，你需要将它转换成分数形式，其分母为 1。所以在上述例子中, 2 应该被转换为 2/1。

 

示例 1:
输入: expression = "-1/2+1/2"
输出: "0/1"

示例 2:
输入: expression = "-1/2+1/2+1/3"
输出: "1/3"

示例 3:
输入: expression = "1/3-1/2"
输出: "-1/6"
 

提示:
输入和输出字符串只包含 '0' 到 '9' 的数字，以及 '/', '+' 和 '-'。 
输入和输出分数格式均为 ±分子/分母。如果输入的第一个分数或者输出的分数是正数，则 '+' 会被省略掉。
输入只包含合法的最简分数，每个分数的分子与分母的范围是  [1,10]。 如果分母是1，意味着这个分数实际上是一个整数。
输入的分数个数范围是 [1,10]。
最终结果的分子与分母保证是 32 位整数范围内的有效整数。

解题思路：
1、将'-'号替换为'+-'号，并通过'+'号来split expression
2、如果第一项为空，从第二项开始遍历数列
3、对每一项，根据'/'分割分子和分母
4、分母累乘，得到分式的分母
5、分子先通分再相加
6、找出分母和分子的最大公因数，除去


class Solution:
    def fractionAddition(self, expression: str) -> str:
        # 将'-'替换为'+-',便于分割
        expression = expression.replace("-", "+-")
        if expression[0] == '+':
            expression = expression[1:]
        numbers = expression.split("+")
        numerator = []  # 分子
        denominator = []  # 分母
        # 将分数的分子和分母分别存入到数组中
        for i in range(len(numbers)):
            numerator.append(int(numbers[i].split("/")[0]))
            denominator.append(int(numbers[i].split("/")[1]))
        finalDenominator = 1  # 分母累乘,即公倍数
        for i in denominator:
            finalDenominator = finalDenominator * i
        finalNumerator = 0
        for i in range(len(numbers)):  # 通分后的分子总和
            numerator[i] = numerator[i] * finalDenominator / denominator[i]
            finalNumerator = int(finalNumerator + numerator[i])
        if finalNumerator == 0:
            return "0/1"
        m = int(abs(finalNumerator))
        n = int(abs(finalDenominator))
        result = 1  # 最大公约数
        for i in range(min(m, n), 1, -1):
            if m % i == 0 and n % i == 0:
                result = i
                break
        return str(int(finalNumerator / result)) + "/" + str(int(finalDenominator / result))
