累加数 是一个字符串，组成它的数字可以形成累加序列。
一个有效的 累加序列 必须 至少 包含 3 个数。除了最开始的两个数以外，序列中的每个后续数字必须是它之前两个数字之和。
给你一个只包含数字 '0'-'9' 的字符串，编写一个算法来判断给定输入是否是 累加数 。如果是，返回 true ；否则，返回 false 。
说明：累加序列里的数，除数字 0 之外，不会 以 0 开头，所以不会出现 1, 2, 03 或者 1, 02, 3 的情况。

 

示例 1：
输入："112358"
输出：true 
解释：累加序列为: 1, 1, 2, 3, 5, 8 。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8

示例 2：
输入："199100199"
输出：true 
解释：累加序列为: 1, 99, 100, 199。1 + 99 = 100, 99 + 100 = 199


解题思路：
1、模拟累加数列生成过程
2、按序逐渐尝试


class Solution:
    def isAdditiveNumber(self, num: str) -> bool:
        n = len(num)
        for i in range(1, n - 1):
            for j in range(i + 1, n):
                if self.generate(num, i, j) == num:
                    return True
        return False

    def generate(self, num, i, j):
        """给出两切点输出斐波那契数列"""
        # 合法性检验
        if len(num[:i]) >= 2 and num[0] == '0': return ""
        if len(num[i:j]) >= 2 and num[i] == '0': return ""

        a = int(num[:i])
        b = int(num[i:j])
        ans = num[:j]
        while len(ans) < len(num):
            a, b = b, a + b
            ans += str(b)
        return ans
