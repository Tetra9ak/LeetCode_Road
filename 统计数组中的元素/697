给定一个非空且只包含非负数的整数数组 nums，数组的 度 的定义是指数组里任一元素出现频数的最大值。
你的任务是在 nums 中找到与 nums 拥有相同大小的度的最短连续子数组，返回其长度。

 

示例 1：
输入：nums = [1,2,2,3,1]
输出：2
解释：
输入数组的度是 2 ，因为元素 1 和 2 的出现频数最大，均为 2 。
连续子数组里面拥有相同度的有如下所示：
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
最短连续子数组 [2, 2] 的长度为 2 ，所以返回 2 。

示例 2：
输入：nums = [1,2,2,3,1,4,2]
输出：6
解释：
数组的度是 3 ，因为元素 2 重复出现 3 次。
所以 [2,2,3,1,4,2] 是最短子数组，因此返回 6 。
 
提示：
nums.length 在 1 到 50,000 范围内。
nums[i] 是一个在 0 到 49,999 范围内的整数。



解题思路：
1、先统计数组中各个元素出现的次数并计算度
2、找出度所包含的元素位于数组中的位置
3、选出起始位置最短的某一个元素的长度



class Solution(object):
    def findShortestSubArray(self, nums):

        #1.先找到度，用字典统计，再找最大统计数，即为度
        dic = {}
        for i in nums:
            if i in dic:
                dic[i] += 1
            else: 
                dic[i] = 1
        du = 0
        for i in dic:
            if du < dic[i]: du = dic[i]
        if du == 1:
            return 1
         
        #根据度找数，找出所有最大度的数
        num = []
        for i in dic:
            if dic[i] == du:
                num.append(i)
        
        #根据数找该数最大最小下标，根据下标计算最短连续子数组
        start, end = 0, 0
        num_length = []
        for i in num:
            #设置flag,记录最小下标（第一次出现的下标）
            flag = 1
            for j in range(len(nums)):
                #不断更新最大下标
                if nums[j] == i:
                    end = j
                #记录第一次的下标
                if flag == 1:
                    if nums[j] == i:
                        start = j
                        flag -= 1
            num_length.append(end-start+1)
        return min(num_length)
