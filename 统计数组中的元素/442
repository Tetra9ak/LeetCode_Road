给你一个长度为 n 的整数数组 nums ，其中 nums 的所有整数都在范围 [1, n] 内，且每个整数出现 一次 或 两次 。请你找出所有出现 两次 的整数，并以数组形式返回。
你必须设计并实现一个时间复杂度为 O(n) 且仅使用常量额外空间的算法解决此问题。

 

示例 1：
输入：nums = [4,3,2,7,8,2,3,1]
输出：[2,3]

示例 2：
输入：nums = [1,1,2]
输出：[1]

示例 3：
输入：nums = [1]
输出：[]
 

提示：
n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
nums 中的每个元素出现 一次 或 两次



解题思路：
使用常量额外空间，所以可以对原始数组进行处理
1、长度为n的数组且元素为1-n，则数组下标与数组元素之间可以一一对应
2、依次取nums中的元素i，将其对应的下标所表示的元素nums[i-1]取反
3、判断是否为负数，若是的话说明之前取过这个值的数

class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        l = []
        for i in nums:
            # 取绝对值
            i = abs(i)
            # 把相应下标减1的值设为负数
            if nums[i-1] > 0:
                nums[i-1] *= -1
            # 值为负的话，说明该值已经出现过，添加到输出列表l中
            else:
                l.append(i)
                
        return l
